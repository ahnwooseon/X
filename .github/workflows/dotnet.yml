name: CI/CD - Build & Deploy Aspire App with Multi-Container Setup

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    name: üõ† Build, Test, and Deploy Multi-Container Aspire App
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore, Build and Test
        run: |
          dotnet restore
          dotnet build --no-restore
          dotnet test --no-build --verbosity normal

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cr√©ation d'un fichier .env √† partir des secrets GitHub
      - name: Create .env file
        run: |
          echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" > .env
          echo "REDIS_CONNECTION=${{ secrets.REDIS_CONNECTION }}" >> .env
          echo "API_SERVICE_URL=http://api" >> .env
          echo "API_SERVICE_PORT=80" >> .env
          # Ajoute d'autres variables selon tes besoins
      
      # Cr√©ation des fichiers Dockerfile pour chaque service
      - name: Create Dockerfile.api
        run: |
          cat << 'EOF' > Dockerfile.api
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY "XY.ApiService/XY.ApiService.csproj" "XY.ApiService/"
          COPY "XY.ServiceDefaults/XY.ServiceDefaults.csproj" "XY.ServiceDefaults/"
          RUN dotnet restore "XY.ApiService/XY.ApiService.csproj"
          COPY "XY.ApiService/" "XY.ApiService/"
          COPY "XY.ServiceDefaults/" "XY.ServiceDefaults/"
          RUN dotnet build "XY.ApiService/XY.ApiService.csproj" -c Release -o /app/build
          FROM build AS publish
          RUN dotnet publish "XY.ApiService/XY.ApiService.csproj" -c Release -o /app/publish /p:UseAppHost=false
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
          WORKDIR /app
          EXPOSE 80
          ENV ASPNETCORE_ENVIRONMENT=Production
          COPY --from=publish /app/publish .
          ENTRYPOINT ["dotnet", "XY.ApiService.dll"]
          EOF

      - name: Create Dockerfile.web
        run: |
          cat << 'EOF' > Dockerfile.web
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY "XY.Web/XY.Web.csproj" "XY.Web/"
          COPY "XY.ServiceDefaults/XY.ServiceDefaults.csproj" "XY.ServiceDefaults/"
          RUN dotnet restore "XY.Web/XY.Web.csproj"
          COPY "XY.Web/" "XY.Web/"
          COPY "XY.ServiceDefaults/" "XY.ServiceDefaults/"
          RUN dotnet build "XY.Web/XY.Web.csproj" -c Release -o /app/build
          FROM build AS publish
          RUN dotnet publish "XY.Web/XY.Web.csproj" -c Release -o /app/publish /p:UseAppHost=false
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
          WORKDIR /app
          EXPOSE 80
          ENV ASPNETCORE_ENVIRONMENT=Production
          COPY --from=publish /app/publish .
          ENTRYPOINT ["dotnet", "XY.Web.dll"]
          EOF

      # Mise √† jour du docker-compose.yml
      - name: Update docker-compose.yml
        run: |
          cat << 'EOF' > docker-compose.yml
          version: '3.8'
          
          services:
            api:
              build:
                context: .
                dockerfile: Dockerfile.api
              container_name: xy-api
              ports:
                - "5001:80"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
                - REDIS_CONNECTION=${REDIS_CONNECTION}
              restart: always
              networks:
                - xy-network
          
            web:
              build:
                context: .
                dockerfile: Dockerfile.web
              container_name: xy-web
              ports:
                - "6789:80"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ApiService__Url=${API_SERVICE_URL}
                - ApiService__Port=${API_SERVICE_PORT}
              depends_on:
                - api
              restart: always
              networks:
                - xy-network
          
          networks:
            xy-network:
              driver: bridge
          EOF

      - name: Deploy Containers with Compose
        run: |
          docker compose down || true
          docker compose up -d --build

      - name: Verify Deployment
        run: |
          sleep 10  # Attendre que les conteneurs d√©marrent
          docker compose ps
